# Cloud Functions + Scheduler version 1.13 (Minimalist)
name: Deploy Cloud Function

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.9

      - name: Install script dependencies
        run: pip install python-dotenv requests

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Load settings for GHA and GCloud
        id: load_settings
        run: python ./.github/scripts/load_env_vars.py project.env

      - name: Lock dependencies
        run: uv lock

      - name: Lint with Ruff
        run: |
          uv add ruff # Assumes this adds to pyproject.toml if needed
          uv run ruff check app

      - name: Run tests
        id: tests
        run: |
          uv add pytest pytest-cov # Assumes this adds to pyproject.toml if needed
          uv run pytest --cov=app --cov-report=term-missing -v | tee pytest_results.log

      - name: Extract pytest summary
        id: summary
        run: python ./.github/scripts/extract_pytest_summary.py pytest_results.log

      - name: Export requirements.txt
        run: uv export --format requirements-txt --locked > app/requirements.txt

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2.1.2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          create_credentials_file: true

      - name: Deploy Cloud Function
        id: deploy_func
        run: |
          # Rely on workflow failure if required env vars are missing
          GCLOUD_CMD="gcloud functions deploy ${{ env.SERVICE_NAME }}"
          GCLOUD_CMD+=" --project=${{ env.PROJECT_ID }}"
          GCLOUD_CMD+=" --runtime=${{ env.RUNTIME }}"
          GCLOUD_CMD+=" --timeout=${{ env.TIMEOUT }}"
          GCLOUD_CMD+=" --trigger-http --region=${{ env.REGION }} --gen2"
          GCLOUD_CMD+=" --source=./app --entry-point=main --memory=512Mi"
          GCLOUD_CMD+=" --service-account=${{ env.RUNTIME_SERVICE_ACCOUNT_EMAIL }}"
          GCLOUD_CMD+=" --quiet"

          GCLOUD_ENV_STRING='${{ steps.load_settings.outputs.gcloud_env_string }}'

          # FAIL the step if the environment variable string is empty
          # This indicates either project.env was empty or load_settings failed to produce output.
          if [ -z "$GCLOUD_ENV_STRING" ]; then
            echo "::error::No environment variables were loaded from project.env or the load_settings step failed to produce the gcloud_env_string output. Deployment requires environment variables."
            exit 1 # Explicitly fail the step
          fi
          
          # If the check passed, add the flag with the variables
          echo "Setting environment variables for Cloud Function."
          # Quote the entire string for the gcloud command
          GCLOUD_CMD+=" --set-env-vars \"$GCLOUD_ENV_STRING\""
          # --- End check and add section ---
          
          start_time=$(date +%s)
          eval "$GCLOUD_CMD" > deploy_output.log 2> deploy_error.log
          exit_code=$?
          end_time=$(date +%s)
          duration=$((end_time - start_time))

          if [ $exit_code -eq 0 ]; then
            echo "deploy_duration=${duration}" >> $GITHUB_OUTPUT
          else
            error_snippet=$(tail -c 1000 deploy_error.log)
            delimiter_err="EOF_ERR_$(date +%s%N)_${RANDOM}"
            echo "deploy_error_snippet_raw<<${delimiter_err}" >> $GITHUB_OUTPUT
            echo "${error_snippet}" >> $GITHUB_OUTPUT
            echo "${delimiter_err}" >> $GITHUB_OUTPUT
            exit 1
          fi
        env: # Still useful to ensure GCLOUD_ENV_VARS is easily accessible in the run script
          GCLOUD_ENV_VARS: ${{ env.GCLOUD_ENV_VARS }}

      - name: Configure Scheduler Job1 (15m - POST with Body)
        run: |
          function_url=$(gcloud functions describe vk-photo-scraper --project=soldier-tracker --region=europe-west3 --gen2 --format='value(serviceConfig.uri)')
          echo "DEBUG: Job 1 function_url: [${function_url}]"

          message_body_json='{"task_file": "15m_tasks.json", "token_name": "vk-token-e107"}'
          echo "DEBUG: Job 1 message_body_json: [${message_body_json}]" # Check this debug output carefully!

          gcloud scheduler jobs update http "vk-photo-scraper-15m-job" \
            --project=soldier-tracker \
            --location="europe-west3" \
            --schedule="*/15 * * * *" \
            --time-zone="Europe/Stockholm" \
            --uri="${function_url}" \
            --http-method=POST \
            --update-headers=Content-Type=application/json \
            --message-body="${message_body_json}" \
            --oidc-service-account-email="container-telethon-bot@soldier-tracker.iam.gserviceaccount.com" \
            --oidc-token-audience="${function_url}" \
            --attempt-deadline="600s" \
            --description="Triggers vk-photo-scraper function every 15 minutes via POST." \
            --quiet || \
          gcloud scheduler jobs create http "vk-photo-scraper-15m-job" \
            --project=soldier-tracker \
            --location="europe-west3" \
            --schedule="*/15 * * * *" \
            --time-zone="Europe/Stockholm" \
            --uri="${function_url}" \
            --http-method=POST \
            --headers=Content-Type=application/json \
            --message-body="${message_body_json}" \
            --oidc-service-account-email="container-telethon-bot@soldier-tracker.iam.gserviceaccount.com" \
            --oidc-token-audience="${function_url}" \
            --attempt-deadline="600s" \
            --description="Triggers vk-photo-scraper function every 15 minutes via POST." \
            --quiet

      - name: Configure Scheduler Job2 (Daily - POST with Body)
        run: |
          function_url=$(gcloud functions describe vk-photo-scraper --project=soldier-tracker --region=europe-west3 --gen2 --format='value(serviceConfig.uri)')
          echo "DEBUG: Job 2 function_url: [${function_url}]"

          message_body_json='{"task_file": "1d_tasks.json", "token_name": "vk-token-11a9"}'
          echo "DEBUG: Job 2 message_body_json: [${message_body_json}]" # Check this debug output carefully!

          gcloud scheduler jobs update http "vk-photo-scraper-daily-job" \
            --project=soldier-tracker \
            --location="europe-west3" \
            --schedule="23 12 * * *" \
            --time-zone="Europe/Stockholm" \
            --uri="${function_url}" \
            --http-method=POST \
            --update-headers=Content-Type=application/json \
            --message-body="${message_body_json}" \
            --oidc-service-account-email="container-telethon-bot@soldier-tracker.iam.gserviceaccount.com" \
            --oidc-token-audience="${function_url}" \
            --attempt-deadline="600s" \
            --description="Triggers vk-photo-scraper function every 24 hours via POST." \
            --quiet || \
          gcloud scheduler jobs create http "vk-photo-scraper-daily-job" \
            --project=soldier-tracker \
            --location="europe-west3" \
            --schedule="23 12 * * *" \
            --time-zone="Europe/Stockholm" \
            --uri="${function_url}" \
            --http-method=POST \
            --headers=Content-Type=application/json \
            --message-body="${message_body_json}" \
            --oidc-service-account-email="container-telethon-bot@soldier-tracker.iam.gserviceaccount.com" \
            --oidc-token-audience="${function_url}" \
            --attempt-deadline="600s" \
            --description="Triggers vk-photo-scraper function every 24 hours via POST." \
            --quiet

      - name: Notify Discord on Success
        if: success()
        env: # Minimal env block - only for step outputs/context not globally available
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          TEST_SUMMARY: ${{ steps.summary.outputs.summary_line }}
          DEPLOY_DURATION: ${{ steps.deploy_func.outputs.deploy_duration }}
        run: |
          PAYLOAD=$(python ./.github/scripts/generate_discord_payload.py success)
          python ./.github/scripts/send_discord_notification.py "$PAYLOAD"

      - name: Notify Discord on Failure
        if: failure()
        env: # Minimal env block - only for step outputs/context not globally available
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          DEPLOY_ERROR_SNIPPET: ${{ steps.deploy_func.outputs.deploy_error_snippet_raw }}
        run: |
          PAYLOAD=$(python ./.github/scripts/generate_discord_payload.py failure)
          python ./.github/scripts/send_discord_notification.py "$PAYLOAD"